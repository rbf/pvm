# This file is to be sourced with devenv.

# Usage:  docker run [OPTIONS] IMAGE [COMMAND] [ARG...]
#
# Run a command in a new container
#
#   -d, --detach             Run container in background and print container ID
#   -e, --env list           Set environment variables
#   -i, --interactive        Keep STDIN open even if not attached
#   -p, --publish list       Publish a container's port(s) to the host
#   -t, --tty                Allocate a pseudo-TTY
#   --rm                     Automatically remove the container when it exits
#   --name string            Assign a name to the container
#   -h, --hostname string    Container host name
#   -v, --volume list        Bind mount a volume

if [[ "${SHELL}" != '/bin/zsh' ]]; then
  echo "This script is mean to be sourced on a zsh shell."
  return 1
fi

export __DEVENV_DEV_SETUP_SCRIPT_FULL_PATH="${0:A}"
export __DEVENV_APP_SETUP_DIR="$(dirname "${__DEVENV_DEV_SETUP_SCRIPT_FULL_PATH}")"
export __DEVENV_APP_ROOT_DIR="$(pwd)"

export __DEVENV_NODE_VERSION="17.1.0-alpine3.13"

function __echo_success() { print -P "%F{2}SUCCESS${*+: }${*}%f" }
function __echo_error()   { print -P "%F{1}ERROR${*+: }${*}%f" }

function __devenv_check_docker_available_and_running() {
  if ! which docker 1>/dev/null; then
    __echo_error "'docker' command not found. Is docker installed?"
    false
  elif ! docker system info 1>/dev/null 2>/dev/null; then
    __echo_error "Cannot connect to the Docker daemon. Is the Docker daemon running?"
    false
  fi
}

function __devenv_docker_node_image_present() {
   docker image inspect \
          --format="Image '$(__devenv_docker_get_image_name_and_tag)' created on {{.Created}}" \
          "$(__devenv_docker_get_image_name_and_tag)" \
          2>/dev/null
}

function __devenv_docker_build_node_image() {
  __devenv_check_docker_available_and_running || return $?
  echo "Building dev image with node v${__DEVENV_NODE_VERSION}."
  pwd
  DOCKER_SCAN_SUGGEST=false docker build \
    --network host \
    --build-arg NODE_VERSION=${__DEVENV_NODE_VERSION} \
    --label "org.opencontainers.image.title=Node.js Dev Image" \
    --label "org.opencontainers.image.description=Image build with 'devenv' to make available node.js related commands." \
    --label "org.opencontainers.image.created=$(date)" \
    --label "org.opencontainers.image.licenses=Private - Not for public usage" \
    --tag $(__devenv_docker_get_image_name_and_tag) \
    --file "${__DEVENV_APP_SETUP_DIR}/Dockerfile" \
    .
}

function __devenv_docker_get_image_name_and_tag() {
  print "devenv-image-node:${__DEVENV_NODE_VERSION}"
}

function __devenv_docker_node_dev_img_run() {
  __devenv_check_docker_available_and_running || return $?
  docker run \
      --interactive \
      --tty \
      --rm \
      --publish 4000:4000 \
      --name node-devenv-ctr \
      --hostname node-devenv-ctr \
      --volume "${__DEVENV_APP_ROOT_DIR}":/home/dev \
      "$(__devenv_docker_get_image_name_and_tag)" \
      "${@}"
}

if __devenv_docker_node_image_present; then
  print
else
  __devenv_docker_build_node_image || return $?
fi

function __devenv_print_and_run_command() {
  print "$ ${@}"
  __devenv_docker_node_dev_img_run "${@}"
}

__devenv_print_and_run_command node --version || return $?
echo

__devenv_print_and_run_command npm --version || return $?
echo

alias node='__devenv_docker_node_dev_img_run node'
alias npm='__devenv_docker_node_dev_img_run npm'

alias devenv-container='__devenv_docker_node_dev_img_run'

echo "You have now following commands available in this shell:"
echo
echo "  - node"
echo "  - npm"
echo "  - devenv-container"
echo

unset -f __devenv_docker_build_node_image
unset -f __devenv_print_and_run_command
