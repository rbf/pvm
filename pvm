#!/bin/zsh

set -o pipefail

PVM_VERSION='0.2.2'
PVM_URL='https://github.com/rbf/pvm'

# Make arrays to be zero-based, as in bash.
setopt KSH_ARRAYS

PVM_FULL_PATH="${0:A}"
PVM_DIR="$(dirname "${PVM_FULL_PATH}")"
PVM_NAME="$(basename "${PVM_FULL_PATH}")"
INSTALL_DIR="/usr/local/bin"
INSTALL_FULL_PATH="${INSTALL_DIR}/${PVM_NAME}"

function print_version() {
  print ${PVM_NAME} ${PVM_VERSION}
}

function print_help() {
  print -P "
%B$(print_version)%b

    Setup and use local dev environments without installing them locally
    leveraging Docker to simulate the commands available normally for the
    given dev environment.

    More details: ${PVM_URL}


%BCaveats:%b

    ${PVM_NAME} is in its version ${PVM_VERSION} and currently only works for Zshell
    and on macOS. Bash and Linux compatibility might come in the future.

    Note that although ${PVM_NAME} leverages Docker to start containers for each
    environment, it expects Docker to be running in the system and does not
    start it if missing. If you do not have Docker installed on your machine,
    please consider e.g. checking out Docker Desktop at

        https://www.docker.com/products/docker-desktop

    Finally, please note that for now the following command needs to be
    manually added at the end of your .zshrc file to allow ${PVM_NAME} to load
    environments:

      \$(${PVM_NAME} --setup-zsh-env)


%BUsage:%b

  %B${PVM_NAME}%b [%B%F{2}command%f%b] [%F{3}flags...%f] [%F{3}options...%f]


%BAvailable top level flags:%b

  %B%F{3}--version%f%b, %F{3}-v%f       Print the ${PVM_NAME} version.
  %B%F{3}--help%f%b, %F{3}-h%f          Print this help.


%BAvailable commands:%b

  %B%F{2}install%f%b             Create a simlink to /usr/local/bin and explains what else to do.

  %B%F{2}list%f%b  [%F{3}flags...%f]    List available environments.

      %F{3}--all%f, %F{3}-a%f             List all versions for each enviorment. Without this flag only the
                            default version for each environment is listed.
      %F{3}--filter%f, %F{3}-f string%f   List only the environments matching the given string.
      %F{3}--verbose%f, %F{3}-v%f         Include headers and base Docker image tag.
      %F{3}--color%f, %F{3}--no-color%f   Force or disable color formating. By default, on when sdtout is terminal
                            and off otherwise.
      %F{3}--porcelain%f           Format in a machine readable way (i.e. csv).

  %B%F{2}use%f%b [%F{3}flags...%f] %F{3}string%f [%F{3}version%f [%F{3}tool-version%f]]
                      Configures the current shell session with the tools to use the 'string' env.
                      By default it uses the newest available version. Optionally, the environment
                      and the corresponding tool's versions (if present for that environment) can be
                      specified.

      %F{3}--port%f, %F{3}-p int%f        use the given port on the ${PVM_NAME} container and bind it
                            to the same port on the host system.
"
}

function exit_with_error() {
  print -P "%F{1}ERROR${*+: }${*}%f" 1>&2
  print "Type 'pvm --help' for more information." 1>&2
  exit 1
}

function exit_with_warn() {
  print -P "%F{3}${*:?missing warn message}%f"
  exit 1
}

function exit_with_success() {
  print -P "%F{2}SUCCESS${*+: }${*}%f"
  exit 0
}

function get_version_pattern() {
  case "${1}" in
    '' )
      return
      ;;
    *.*.[0-9]|*.*.[0-9][0-9]|*.*.[0-9][0-9][0-9] )
      print "${1//./\\\\.}"
      ;;
    *.[0-9]|*.[0-9][0-9]|*.[0-9][0-9][0-9] )
      print "${1//./\\\\.}\\\\.[0-9][0-9]*"
      ;;
    [0-9]|[0-9][0-9]|[0-9][0-9][0-9] )
      print "${1//./\\\\.}\\\\.[0-9][0-9]*\\\\.[0-9][0-9]*"
      ;;
    * )
      exit_with_error "Unrecognized version format: '${1}'"
      ;;
  esac
}

function env_version() {
  echo "${1:-${IMAGE_TAGS[${i}]}}" | grep -oE '\d+\.\d+(?:\.\d+)?'
}

function parse_env_versions() {
  unset IMAGE_TAGS TOOL_VERSIONS
  if ! versions="$(set -o pipefail; cat "${1}/versions" | sed '/^\s*#/d;/^$/d')"; then
    exit_with_error "Unable to parse available versions from '${1}/versions'."
  fi

  # (f) Split the result of the expansion at newlines.
  # SOURCE: 17nov2021 https://zsh.sourceforge.io/Doc/Release/Expansion.html#Glob-Qualifiers
  for version in "${(f)versions}"; do
    found_versions=true
    IMAGE_TAGS+=("${version%%|*}")
    TOOL_VERSIONS+=("$(echo ${version} | sed '/|/!d;s/[^|]*|\(.*\)/\1/')")
    ${is_print_all_versions:-true} || break
  done
  unset version versions
}

function list() {
  local is_porcelain=false
  local is_verbose=false
  local is_print_all_versions=false
  local is_color_enabled=${is_sdtout_to_terminal}
  local filter_pattern='.*'
  while (( # > 0 )); do
    case "${1}" in
      --color )
        shift
        is_color_enabled=true
        ;;
      --no-color )
        shift
        is_color_enabled=false
        ;;
      --porcelain )
        shift
        is_porcelain=true
        ;;
      --verbose|-v )
        shift
        is_verbose=true
        ;;
      --all|-a )
        shift
        is_print_all_versions=true
        ;;
      --filter|-f )
        flag="${1}"
        shift
        if [ -n "${1}" ]; then
          filter_pattern="${1}"
          shift
        else
          exit_with_error "Missing value for '${flag}' flag"
        fi
        ;;
      * )
        exit_with_error "Unsupported option '${1}' for list command"
        ;;
    esac
  done

  function image_tag() {
    $is_verbose && print -n "${env_name}:${IMAGE_TAGS[${i}]}${1}"
  }

  function get_fg_for() {
    field="${1}"
    prev_field="prev_${1}"
    fg_field="fg_${1}"
    if [ "${(P)field}" = "${(P)prev_field}" ]; then
      typeset -g "${fg_field}=8"
    else
      typeset -g "${fg_field}=15"
    fi
    typeset -g "${prev_field}=${(P)field}"
  }

  function row_colored() {
    get_fg_for env_name
    get_fg_for env_version
    get_fg_for tool_name
    get_fg_for tool_version
    get_fg_for image_tag
    print -Pn "|%B%F{${fg_env_name}}${env_name}%f%b" \
              "|%B%F{${fg_env_version}}${env_version}%f%b|"
    if $is_verbose; then
      print -P -- "%F{${fg_tool_name}}${tool_name:--}%f" \
                  "|%F{${fg_tool_version}}${tool_version:--}%f" \
                  "|%F{${fg_image_tag}}${image_tag}%f"
    else
      print -P -- "%F{${fg_tool_name}}${tool_name}%f %F{${fg_tool_version}}${tool_version}%f"
    fi
  }

  function row_not_colored() {
    print -n "|${env_name}|${env_version}|"
    if $is_verbose; then
      print -- "${tool_name:--}|${tool_version:--}|${image_tag}"
    else
      print -- "${tool_name} ${tool_version}"
    fi
  }

  function list_human_friendly() {
    for (( i = 0; i < ${#IMAGE_TAGS[@]}; i++ )); do
      env_version="$(env_version)"
      tool_version="${TOOL_VERSIONS[i]}"
      image_tag="$(image_tag)"
      if ((i == 0)); then
        print -n "*"
      else
        print -n " "
      fi
      $is_color_enabled && row_colored || row_not_colored
    done
  }

  function list_porcelain() {
    for (( i = 0; i < ${#IMAGE_TAGS[@]}; i++ )); do
      print "${env_name};$(env_version);${tool_name};${TOOL_VERSIONS[${i}]};$(image_tag ';')"
    done
  }

  if $is_verbose; then
    if $is_porcelain; then
      print "env;version;tool;tool version;base docker image;"
    elif $is_color_enabled; then
      print -P " |%B%F{15}ENV%f%b|%B%F{15}VERSION%f%b|%F{15}TOOL%f|%F{15}TOOL VERSION%f|%F{15}BASE DOCKER IMAGE%f"
    else
      print " |ENV|VERSION|TOOL|TOOL VERSION|BASE DOCKER IMAGE"
    fi
  fi

  find "${PVM_DIR}/env" -type d -mindepth 1 -maxdepth 1 | sort | while read env_dir; do
    parse_env_versions "${env_dir}"
    env_name="$(basename ${env_dir})"
    prev_env_name=""
    tool_name="$(grep '__PVM_SECONDARY_NAME' "${env_dir}/script" | cut -f 2 -d '=' | tr -d '"'"'")"
    prev_tool_name=""
    { $is_porcelain && list_porcelain || list_human_friendly } | grep -- "${filter_pattern}"
  done
  unset env_dir env_name prev_env_name
}

function check_available_target_env_or_exit() {
  if ! [ -n "${1}" ]; then
    exit_with_error "Target env missing."
  fi

  TARGET_ENV_DIR="${PVM_DIR}/env/${1}"
  if ! [ -d "${TARGET_ENV_DIR}" ]; then
    exit_with_error "Target env '${1}' not found."
  fi
}

function set_target_env_and_tool_versions_or_exit() {
  parse_env_versions "${TARGET_ENV_DIR}"

  if ! [ -n "${1}" ]; then
    BASE_IMAGE_VERSION="${IMAGE_TAGS[0]}"
    SECONDARY_VERSION="${TOOL_VERSIONS[0]}"
    return
  fi

  env_version_pattern="$(get_version_pattern "${1}")" || exit
  tool_version_pattern="$(get_version_pattern "${2}")" || exit

  local env_version
  local tool_version
  for (( i = 0; i < ${#IMAGE_TAGS[@]}; i++ )); do
    env_version="${IMAGE_TAGS[$i]}"
    tool_version="${TOOL_VERSIONS[$i]}"
    if [[ "${env_version}" =~ "(^|-)${env_version_pattern}" ]] && [[ "${tool_version}" =~ "^${tool_version_pattern}" ]]; then
      BASE_IMAGE_VERSION="${env_version}"
      SECONDARY_VERSION="${tool_version}"
      return
    fi
  done
  exit_with_error \
    "No available ${TARGET_ENV} version matching '${1}'${2:+ with tool version "'"}${2}${2:+"'"}." \
    "Type 'pvm list -a -f ${TARGET_ENV}' for a list of available ${TARGET_ENV} versions."
}

function source_pvm_wrapper_fn() {
  print "source ${PVM_FULL_PATH}_wrapper_fn \"${${PVM_FULL_PATH}}\""
}

function host_os() {
  case "$(uname -s)" in
    Darwin* )
      print "darwin"
      ;;
    FreeBSD* )
      print "linux"
      ;;
    OpenBSD* )
      print "linux"
      ;;
    * )
      print "linux"
  esac
}

function use_target_env() {
  if [ -z "${TMUX}" ]; then
    exit_with_error "${PVM_NAME} currently only works from within a tmux session."
  fi
  while (( # > 0 )); do
    case "${1}" in
      --port|-p )
        flag="${1}"
        shift
        if [ -n "${1}" ]; then
          PORT="${1}"
          shift
        else
          exit_with_error "Missing value for '${flag}' flag"
        fi
        ;;
      -- )
        shift
        break
        ;;
      -* )
        exit_with_error "Unsupported option '${1}' for open command"
        ;;
      * )
        break
        ;;
    esac
  done
  TARGET_ENV="${1}"
  check_available_target_env_or_exit "${TARGET_ENV}"
  set_target_env_and_tool_versions_or_exit "${2}" "${3}"

  TARGET_ENV_VERSION="$(env_version "${BASE_IMAGE_VERSION}")"
  env_name_and_version="${TARGET_ENV} ${TARGET_ENV_VERSION}"
  mkdir -p ".${PVM_NAME}"
  cat << EOF > ".${PVM_NAME}/env"
export __PVM_HOST_OS="$(host_os)"
export __PVM_TOOL_NAME="${PVM_NAME}"
export __PVM_CUSTOM_PORT="${PORT}"
export __PVM_TARGET="${TARGET_ENV}"
export __PVM_ENV_VERSION="${TARGET_ENV_VERSION}"
export __PVM_BASE_IMAGE_VERSION="${BASE_IMAGE_VERSION}"
export __PVM_SECONDARY_VERSION="${SECONDARY_VERSION}"
source ${PVM_DIR}/env/script
EOF
}

function parse_commands_and_options() {
  while (( # > 0 )); do
    case "${1}" in
      list )
        shift
        list "${@}" | column -txs '|'
        exit
        ;;
      use )
        shift
        use_target_env "${@}"
        exit
        ;;
      --setup-zsh-env )
        shift
        source_pvm_wrapper_fn "${@}"
        exit
        ;;
      --help|-h|'' )
        shift
        print_help
        exit
        ;;
      --version|-v )
        shift
        print_version
        exit
        ;;
      * )
        exit_with_error "Unsupported option: '${1}'"
        ;;
    esac
  done
  print_help
}

if [ -t 1 ]; then
  is_sdtout_to_terminal='true'
else
  is_sdtout_to_terminal='false'
fi

parse_commands_and_options "${@}"  | less -FRXK

exit
