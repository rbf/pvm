#!/bin/zsh

# parse install option to ln -s this to /usr/local/bin

set -o pipefail

DEVENV_VERSION='v0.1'

# Make arrays to be zero-based, as in bash.
setopt KSH_ARRAYS

SCRIPT_FULL_PATH="${0:A}"
SCRIPT_DIR="$(dirname "${SCRIPT_FULL_PATH}")"
SCRIPT_NAME="$(basename "${SCRIPT_FULL_PATH}")"
INSTALL_DIR="/usr/local/bin"
INSTALL_FULL_PATH="${INSTALL_DIR}/${SCRIPT_NAME}"

function print_help() {
  cat << EOF
devenv ${DEVENV_VERSION}
    Install and use local dev environments without installing them locally
    leveraging Docker to simulate the commands available normally for the
    given dev environment.

Available commands:
  install   Creates a simlink to /usr/local/bin.
  help      Print this help.
EOF
}

function exit_with_error() {
  print -P "%F{1}${*:-Something went wrong}%f"
  print
  print_help
  exit 1
}

function exit_with_warn() {
  print -P "%F{3}${*:?missing warn message}%f"
  exit 1
}

function install() {
  if [ -f  "${INSTALL_FULL_PATH}" ]; then
    exit_with_warn "A file named '${SCRIPT_NAME}' is already present in '${INSTALL_DIR}'. Nothing to do."
  fi
  ln -vs "${SCRIPT_FULL_PATH}" "${INSTALL_FULL_PATH}"
}

function parse_commands_and_options() {
  while (( # > 0 )); do
    case "${1}" in
      install )
        shift
        install
        ;;
      help )
        shift
        print_help
        ;;
      * )
        exit_with_error "Unsupported option: '${1}'"
        ;;
    esac
  done
}

parse_commands_and_options "${@}"

exit
